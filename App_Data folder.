// Insuree.cs - Model class for Insuree
public class Insuree
{
    public int Id { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string EmailAddress { get; set; }
    public int Age { get; set; }                 // User's age
    public int CarYear { get; set; }             // Car's year
    public string CarMake { get; set; }          // Car's make (e.g., Porsche)
    public string CarModel { get; set; }         // Car's model (e.g., 911 Carrera)
    public int SpeedingTickets { get; set; }     // Number of speeding tickets
    public bool HadDUI { get; set; }             // Whether the user has had a DUI
    public bool FullCoverage { get; set; }       // Whether full coverage is selected
    public decimal Quote { get; set; }           // Calculated quote
}

// Quote calculation method
public decimal CalculateQuote(Insuree insuree)
{
    // Base monthly cost
    decimal total = 50m;

    // Age-based conditions
    if (insuree.Age <= 18)
    {
        total += 100m;
    }
    else if (insuree.Age >= 19 && insuree.Age <= 25)
    {
        total += 50m;
    }
    else if (insuree.Age >= 26)
    {
        total += 25m;
    }

    // Car year conditions
    if (insuree.CarYear < 2000)
    {
        total += 25m;
    }
    else if (insuree.CarYear > 2015)
    {
        total += 25m;
    }

    // Car make and model conditions
    if (insuree.CarMake == "Porsche")
    {
        total += 25m;
        if (insuree.CarModel == "911 Carrera")
        {
            total += 25m; // Additional charge for Porsche 911 Carrera
        }
    }

    // Speeding tickets charge
    total += insuree.SpeedingTickets * 10m;

    // DUI charge
    if (insuree.HadDUI)
    {
        total *= 1.25m;
    }

    // Full coverage charge
    if (insuree.FullCoverage)
    {
        total *= 1.50m;
    }

    // Set the calculated quote
    insuree.Quote = total;
    return total;
}
@model YourNamespace.Models.Insuree

@{
    ViewBag.Title = "Create";
}

<h2>Create Insuree</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Insuree</h4>
        <hr />
        @* Form fields for Insuree properties *@
        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>
        @* Repeat similar fields for LastName, Age, CarYear, CarMake, CarModel, etc. *@

        @* Hidden Quote field so the user cannot see or edit it *@
        @Html.HiddenFor(model => model.Quote)

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}
@model IEnumerable<YourNamespace.Models.Insuree>

@{
    ViewBag.Title = "Admin";
}

<h2>Admin - All Quotes</h2>

<table class="table">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email Address</th>
            <th>Quote</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var insuree in Model)
        {
            <tr>
                <td>@insuree.FirstName</td>
                <td>@insuree.LastName</td>
                <td>@insuree.EmailAddress</td>
                <td>@insuree.Quote.ToString("C")</td>
            </tr>
        }
    </tbody>
</table>
// InsureeController.cs
using System.Linq;
using System.Web.Mvc;
using YourNamespace.Models;

public class InsureeController : Controller
{
    private ApplicationDbContext db = new ApplicationDbContext();

    // POST: Insuree/Create
    [HttpPost]
    [ValidateAntiForgeryToken]
    public ActionResult Create(Insuree insuree)
    {
        if (ModelState.IsValid)
        {
            insuree.Quote = CalculateQuote(insuree); // Call the quote calculation method
            db.Insurees.Add(insuree);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        return View(insuree);
    }

    // Admin view to display all quotes
    public ActionResult Admin()
    {
        var insurees = db.Insurees.ToList();
        return View(insurees);
    }

    // Include the CalculateQuote method as shown above
}
